{
  "hash": "3c3ec25823d554e449b3b0708629424a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"rix: reproducible development environments for R programmers\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    slide-number: true\n    theme: solarized\nexecute:\n  echo: true\n---\n\n\n## Who am I?\n\n- Bruno Rodrigues, head of the statistics and data strategy departments at the\n Ministry of Research and Higher education in Luxembourg\n\n- Using R since 2009\n\n- Slides available online at [https://is.gd/nix_dipf](https://is.gd/nix_dipf)\n\n- Code available at: [https://github.com/b-rodrigues/dipf_workshop](https://github.com/b-rodrigues/dipf_workshop) \n\n## Goal of this workshop\n\nLearn just enough of Nix to use it for reproducibility\n\n## What is Nix? (1/2)\n\n- A package manager\n- A programming language\n- An operating system ([NixOS](https://nixos.org/))\n\nOur focus today: the package manager\n\n## What is Nix? (2/2)\n\nA word of warning: Nix is quite complex\n\nIt does require some time to learn on the user's part\n\nBut I developed `{rix}` which will help\n\n## The Nix package manager\n\nPackage manager: tool to install and manage *packages*\n\nPackage: any piece of software (not just R packages)\n\nA popular package manager:\n\n## The Nix package manager\n\n![Google Play Store](img/play_store.png)\n\n## The reproducibility continuum\n\n- Make sure that the required/correct version of R (or any other language) is\n  installed;\n\n- Make sure that the required versions of packages are installed;\n\n- Make sure that system dependencies are installed (for example, \n  Java installation for rJava);\n\n- Make sure that you can install all of this for the hardware you have on hand.\n\n## Reproducibility in the R ecosystem\n\n- `{renv}` deals with R packages\n- Still need to take care of R itself\n- System-level dependencies as well!\n\nA popular approach: Docker + `{renv}`\n\nNix deals with everything, with one single text file!\n\n## \"Functional\" package manager (1/2)\n\n- Nix: a *functional* package mananger\n\n- Functional, as in, inpired by mathematical functions\n\n- Why math functions?\n\n\\[\nf(x)=y\n\\]\n\n## \"Functional\" package manager (2/2)\n\n- Building a Nix expression always results in the same output \n\n- Output doesn't depend on current system: \n\n> The idea is to always deploy component closures: if we deploy a\n> component, then we must also deploy its dependencies, their dependencies, and so on. That is, we must\n> always deploy a set of components that is closed under\n> the ''depends on'' relation. Since closures are selfcontained, they are the units of complete software\n> deployment. After all, if a set of components is not\n> closed, it is not safe to deploy, since using them might\n> cause other components to be referenced that are missing on the target system.\n\n## A basic Nix expression \n\n```\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz\") {};\n  system_packages = builtins.attrValues {\n    inherit (pkgs) R ;\n  };\nin\n  pkgs.mkShell {\n    buildInputs = [ system_packages ];\n    shellHook = \"R --vanilla\";\n  }\n```\n\n## Nix expressions\n\n- Nix expressions can be used to install software \n- But we will use them to build per-project development shells \n- We will include R, LaTeX packages, or Quarto, Python, Julia....\n- Nix takes care of installating every dependency down to the compiler!\n\n## CRAN and Bioconductor\n\n- CRAN is the repository of R packages to extend the language\n- As of writing, +20000 packages available\n- Biocondcutor: repository with a focus on Bioinformatics: +2000 more packages\n- Almost all available through `nixpkgs` in the `rPackages` set!\n\n## Per-project environments\n\n- Per-project environments are not really a thing\n- Focus on providing a per-project library of packages\n- Docker if reproducibility is required (see [Rocker project](https://rocker-project.org/))\n\n## rix 1/2\n\n- Per-project reproducible environments with `{rix}`.\n- Simply use the provided `rix()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(r_ver = \"4.3.1\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"rstudio\",\n    project_path = \".\")\n```\n:::\n\n\n- Generates [this expression](https://raw.githubusercontent.com/b-rodrigues/fosdem2024_pres/master/shell.nix).\n\n\n## rix 2/2\n\n- Also possible to evaluate single function inside a \"subshell\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout_nix <- with_nix(\n  expr = function() my_function(...),\n  program = \"R\",\n  exec_mode = \"non-blocking\", # run as background process\n  project_path = path_to_subshell.nix,\n  message_type = \"simple\" # you can do `\"verbose\"`, too\n)\n```\n:::\n\n\n- Works from R installed via Nix or not!\n\n## Live Demo\n\n## Nix and Github Actions\n\n## To know more\n\n```\nhttps://b-rodrigues.github.io/rix/\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}