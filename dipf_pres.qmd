---
title: "rix: reproducible development environments for R programmers"
author: "Bruno Rodrigues"
format:
  revealjs:
    slide-number: true
    theme: solarized
execute:
  echo: true
---

## Who am I?

- Bruno Rodrigues, head of the statistics and data strategy departments at the
 Ministry of Research and Higher education in Luxembourg

- Using R since 2009

- Slides available online at [https://is.gd/nix_dipf](https://is.gd/nix_dipf)

- Code available at: [https://github.com/b-rodrigues/dipf_workshop](https://github.com/b-rodrigues/dipf_workshop)

## Goal of this workshop

- Learn just enough of Nix to use it for your R projects
- Skim how to use Nix with Github Actions
- Time allowing: how to make your own binary cache using [Cachix](https://www.cachix.org/)

## What is Nix? (1/2)

- A package manager
- A programming language
- An operating system ([NixOS](https://nixos.org/))

Our focus today: the package manager

## What is Nix? (2/2)

A word of warning: Nix is quite complex

It does require some time to learn on the user's part

But `{rix}` will help

## The Nix package manager

Package manager: tool to install and manage *packages*

Package: any piece of software (not just R packages)

A popular package manager:

## The Nix package manager

![Google Play Store](img/play_store.png)

## The reproducibility continuum

- Make sure that the required/correct version of R (or any other language) is
  installed;

- Make sure that the required versions of packages are installed;

- Make sure that system dependencies are installed (for example,
  Java installation for rJava);

- Make sure that you can install all of this for the hardware you have on hand.

## Reproducibility in the R ecosystem

- `{renv}` deals with R packages
- Still need to take care of R itself
- System-level dependencies as well!

A popular approach: Docker + `{renv}`

Nix deals with everything, with one single text file (called a Nix expression)!

## "Functional" package manager (1/2)

- Nix: a *functional* package mananger

- Functional, as in, inpired by mathematical functions

- Why math functions?

-> f(x)=y

## "Functional" package manager (2/2)

- Building a Nix expression always results in the same output

- Output doesn't depend on state of current system:

> The idea is to always deploy component closures: if we deploy a component,
> then we must also deploy its dependencies, their dependencies, and so on. That
> is, we must always deploy a set of components that is closed under the
> ''depends on'' relation. Since closures are selfcontained, they are the units
> of complete software deployment. After all, if a set of components is not
> closed, it is not safe to deploy, since using them might cause other
> components to be referenced that are missing on the target system.

Eelco Dolstra, *Nix: A Safe and Policy-Free System for Software Deployment*

## A basic Nix expression (1/5)

```
let
  pkgs = import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz") {};
  system_packages = builtins.attrValues {
    inherit (pkgs) R ;
  };
in
  pkgs.mkShell {
    buildInputs = [ system_packages ];
    shellHook = "R --vanilla";
  }
```

There's a lot to discuss here!

## A basic Nix expression (2/5)

- Written in the Nix language

## Nix expressions

- Nix expressions can be used to install software 
- But we will use them to build per-project development shells 
- We will include R, LaTeX packages, or Quarto, Python, Julia....
- Nix takes care of installating every dependency down to the compiler!

## CRAN and Bioconductor

- CRAN is the repository of R packages to extend the language
- As of writing, +20000 packages available
- Biocondcutor: repository with a focus on Bioinformatics: +2000 more packages
- Almost all available through `nixpkgs` in the `rPackages` set!

## Per-project environments

- Per-project environments are not really a thing
- Focus on providing a per-project library of packages
- Docker if reproducibility is required (see [Rocker project](https://rocker-project.org/))

## rix 1/2

- Per-project reproducible environments with `{rix}`.
- Simply use the provided `rix()` function:

```{r, eval = FALSE}
library(rix)

rix(r_ver = "4.3.1",
    r_pkgs = c("dplyr", "ggplot2"),
    system_pkgs = NULL,
    git_pkgs = NULL,
    tex_pkgs = NULL,
    ide = "rstudio",
    project_path = ".")
```

- Generates [this expression](https://raw.githubusercontent.com/b-rodrigues/fosdem2024_pres/master/shell.nix).


## rix 2/2

- Also possible to evaluate single function inside a "subshell":

```{r, eval = F}
out_nix <- with_nix(
  expr = function() my_function(...),
  program = "R",
  exec_mode = "non-blocking", # run as background process
  project_path = path_to_subshell.nix,
  message_type = "simple" # you can do `"verbose"`, too
)
```

- Works from R installed via Nix or not!

## Live Demo

## Nix and Github Actions

## To know more

- Official Nix documentation: [https://nix.dev/](https://nix.dev/)

- Nix pills: [https://nixos.org/guides/nix-pills/00-preface](https://nixos.org/guides/nix-pills/00-preface)

- Nix tutorial by INRIA: [https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/](https://nix-tutorial.gitlabpages.inria.fr/nix-tutorial/)

- My blog: [https://b-rodrigues.github.io/rix/](https://b-rodrigues.github.io/rix/)

- My book (doesn't cover Nix, but Docker, `{renv}` and functional programming): [https://raps-with-r.dev/](https://raps-with-r.dev/)
